module VB6ToX
  grammar VB6
    rule root
      version:version?
      layout?
      attributes?
      module_statements
      subs?
    end

    rule version
      'VERSION' space value:'5.00' eol
    end

    rule layout
      'Begin' space layouttype space identifier eol
      (layout / property / compound_property)*
      'End' eol
    end

    rule layouttype
      'VB.' identifier
    end

    rule identifier
      [_A-Za-z] [_A-Za-z0-9]*
    end

    rule property
      identifier space '=' space (frx_reference / literal) eol
    end

    rule compound_property
      'BeginProperty' space identifier eol
      property*
      'EndProperty' eol
    end

    rule attributes
      attribute*
    end

    rule attribute
      'Attribute' space identifier space '=' space literal eol
    end

    rule module_statements
      option_statement*
      (dim_statement / const_statement)*
    end

    rule option_statement
      'Option' space identifier eol
    end

    rule dim_statement
      'Dim' space variable_declaration (',' space variable_declaration)* eol
    end

    rule variable
      typed_identifier
    end

    rule typed_identifier
      identifier type_suffix?
    end

    rule variable_declaration
      variable dimensions? (space 'As' space type)?
    end

    rule type_suffix
      "%" / "#"/ "$"/ "&" / "!"
    end

    rule const_statement
      'Const' space identifier space '=' space literal eol
    end

    rule subs
      sub*
    end

    rule sub
      'Private Sub' space identifier '()' eol
      (statement / compound_statement)*
      'End Sub' eol
    end

    rule dimensions
      '(' ((decimal_literal ',' space)* decimal_literal)? ')'
    end

    rule type
      'Integer' / 'Double' / 'String'
    end

    rule frx_reference
      string_literal ':' [0-9] [0-9] [0-9] [0-9] 
    end

    rule literal
      floating_point_literal / long_literal / integer_literal /
      string_literal / date_literal / boolean_literal
    end

    rule integer_literal
      # TODO: Longs and floating points need sign as well.
      "-"? decimal_literal / hex_literal / octal_literal
    end

    rule long_literal
      (decimal_literal / hex_literal) "&" 
    end

    rule decimal_literal
      [0-9]+ 
    end

    rule hex_literal
      "&" "H" hex_digits 
    end

    rule hex_digits
      [0-9a-fA-F]+ 
    end

    rule octal_literal
      "&" "o" [0-7]+ 
    end

    rule floating_point_literal
      mantissa exponent? ( "#" / "!" / "@")?
    end

    rule mantissa
      decimal_literal ("." ([0-9])*)? / "." ([0-9])+
    end

    rule exponent
      [eE] [+-]? [0-9]+ 
    end

    rule date_literal
      "#" ( date_only_literal ( " " time_only_literal )? / time_only_literal  ) "#" 
    end

    rule date_only_literal
      decimal_literal "/" decimal_literal "/" decimal_literal 
    end

    rule time_only_literal
      decimal_literal ":" decimal_literal ":" decimal_literal ( " " )+ ( "AM" / "PM" ) 
    end

    rule boolean_literal
      "True" / "False"
    end

    rule string_literal
      '"' (!'"' . / '""')* '"'
    end

    rule statement
      dim_statement / assignment / subroutine_call / exit_sub / exit_for
    end

    rule compound_statement
      inline_if_statement / if_statement / for_loop
    end

    rule inline_if_statement
      'If' space expression space 'Then' space statement
    end

    rule if_statement
      'If' space expression space 'Then' eol
      (statement / compound_statement)*
      'End If' eol
    end

    rule for_loop
      'For' space variable space '=' space value space 'To' space value eol
      (statement / compound_statement)*
      'Next' (space variable)? eol
    end

    rule subroutine_call
      !(keyword (space / eol)) identifier (space arguments?) eol
    end

    rule assignment
      (property_access / array_element / variable) space '=' space expression eol
    end

    rule exit_sub
      'Exit Sub' eol
    end

    rule exit_for
      'Exit For' eol
    end

    rule expression
      or_expression
    end

    rule or_expression
      and_expression space 'Or' space or_expression /
      and_expression
    end

    rule and_expression
      not_expression space 'And' space and_expression /
      not_expression
    end

    rule not_expression
      'Not' space comparison /
      comparison
    end

    rule comparison
      # TODO: Actually, these comparison operators all have a mutual
      # precedence :-(
      addition space ('=' / '<>' / '<=' / '>=' / '<' / '>') space comparison /
      addition
    end

    rule addition
      multiplication space ('+' / '-') space addition /
      multiplication
    end

    rule multiplication
      exponential space ('*' / '/' / '\\' / 'Mod') space multiplication /
      exponential
    end

    rule exponential
      value '^' exponential /
      value
    end

    rule value
      '(' expression ')' /
      function_call / property_access / variable / literal
    end

    rule function_call
      # TODO: Are all functions with a type suffix built-in?
      typed_identifier '(' arguments? ')'
    end

    rule arguments
      expression (',' space expression)*
    end

    rule property_access
      identifier '.' identifier
    end

    rule array_element
      variable '(' arguments ')'
    end

    rule keyword
      'If' / 'End' / 'Exit' / 'For' / 'Next' / 'And' / 'Or' / 'Not'
    end

    rule space
      (' ' / "\t" / "\r" / "\f" / " _\r\n")+
    end

    rule comment
      "'" ((!"\n" .) / " _\r\n")*
    end

    rule eol
      space? comment? (("\n" space? comment?)* / !.) 
    end
  end
end
