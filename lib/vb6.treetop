module VB6ToX
  grammar VB6
    rule root
      version:version?
      layout?
      attributes?
      module_statements?
    end

    rule version
      'VERSION' space value:'5.00' eol
    end

    rule layout
      'Begin' space layouttype space identifier eol
      (layout / property / compound_property)*
      'End' eol
    end

    rule layouttype
      'VB.' identifier
    end

    rule identifier
      [_A-Za-z] [_A-Za-z0-9]*
    end

    rule property
      identifier space '=' space (frx_reference / literal) eol
    end

    rule compound_property
      'BeginProperty' space identifier eol
      property*
      'EndProperty' eol
    end

    rule attributes
      attribute*
    end

    rule attribute
      'Attribute' space identifier space '=' space literal eol
    end

    rule module_statements
      option_statement*
      (dim_statement / const_statement)*
    end

    rule option_statement
      'Option' space identifier eol
    end

    rule dim_statement
      'Dim' space identifier dimensions? (space 'As' space type)? eol
    end

    rule const_statement
      'Const' space identifier space '=' space literal eol
    end

    rule dimensions
      '(' ((decimal_literal ', ')* decimal_literal)? ')'
    end

    rule type
      'Integer' / 'Double' / 'String'
    end

    rule frx_reference
      string_literal ':' [0-9] [0-9] [0-9] [0-9] 
    end

    rule literal
      floating_point_literal / long_literal / integer_literal /
      string_literal / date_literal / boolean_literal
    end

    rule integer_literal
      # TODO: Longs and floating points need sign as well.
      "-"? decimal_literal / hex_literal / octal_literal
    end

    rule long_literal
      (decimal_literal / hex_literal) "&" 
    end

    rule decimal_literal
      [0-9]+ 
    end

    rule hex_literal
      "&" "H" hex_digits 
    end

    rule hex_digits
      [0-9a-fA-F]+ 
    end

    rule octal_literal
      "&" "o" [0-7]+ 
    end

    rule floating_point_literal
      mantissa exponent? ( "#" / "!" / "@")?
    end

    rule mantissa
      decimal_literal ("." ([0-9])*)? / "." ([0-9])+
    end

    rule exponent
      [eE] [+-]? [0-9]+ 
    end

    rule date_literal
      "#" ( date_only_literal ( " " time_only_literal )? / time_only_literal  ) "#" 
    end

    rule date_only_literal
      decimal_literal "/" decimal_literal "/" decimal_literal 
    end

    rule time_only_literal
      decimal_literal ":" decimal_literal ":" decimal_literal ( " " )+ ( "AM" / "PM" ) 
    end

    rule boolean_literal
      "True" / "False"
    end

    rule string_literal
      '"' (!'"' . / '""')* '"'
    end

    rule assignment
      identifier space '=' space expression
    end

    rule statement
      command arguments
    end

    rule arguments
      (expression comma arguments / expression)
    end

    rule space
      (' ' / "\t" / "\r" / "\f" / " _\r\n")+
    end

    rule comment
      "'" ((!"\n" .) / " _\r\n")*
    end

    rule eol
      space? comment? ("\n" space? ("\n" space?)* / !.) 
    end
  end
end
